#!/usr/bin/env python

#This is the file to make my first shake
#proof of concept with only protein and water

import rospy
import time
from std_msgs.msg import String
from std_msgs.msg import Int32
from shakestation.msg import JointPose
from robotis_controller_msgs.msg import StatusMsg
from servosix import ServoSix

def manipulator_status_callback(data):
	global MANIPULATOR_MOVING
	if data.status_msg == "End Trajectory":
		MANIPULATOR_MOVING = False	

def manipulator_move(joints):
	global MANIPULATOR_MOVING
	MANIPULATOR_MOVING = True
	msg = JointPose()
	msg.name = ["joint1", "joint2", "joint3", "joint4", "joint5", "joint6"]
	msg.value = [joints[0], joints[1], joints[2], joints[3], joints[4], joints[5]]
	pubManipulator.publish(msg)
	mustend = time.time() + 10
	while time.time() < mustend:
		if not MANIPULATOR_MOVING: break
		time.sleep(.1)

def build_shake():

	#open gripper
	pubGripper.publish(40)
	print("opened gripper")

################################################################
######################### Make Shake ##########################
################################################################

	#move the manipulator to the cup approach position 
	manipulator_move([-0.3490658503988659, 0.9948376736367678, 0.43493604959698695, 0.0, -1.5446163880149817, 0.06981317007977318])

	#move the manipulator to the cup grasp position 
	manipulator_move([0.0, 0.9948376736367678, 0.43493604959698695, 0.0, -1.5446163880149817, 0.06981317007977318])

	#close gripper to grasp cup
	pubGripper.publish(4)

	#lift cup to base top approach
	manipulator_move([0.0, 0.9599310885968813, 0.43493604959698695, 0.0, -1.5707963267948966, 0.06981317007977318])

	#move cup to mixer approach 
	manipulator_move([0.8517206749732327, 1.117010721276371, 0.15707963267948966, 0.0, -1.4835298641951802, 0.06981317007977318])

	#move cup to mixer mix position
	manipulator_move([0.8517206749732327, 0.6457718232379019, 0.3490658503988659, 0.0, -1.1344640137963142, 0.06981317007977318])

	# #mix
	# pubMixer.publish(1)
	# time.sleep(10)
	# pubMixer.publish(0)
	# time.sleep(2)

	# #move cup back to mixer approach
	# manipulator_move([0.8517206749732327, 1.117010721276371, 0.15707963267948966, 0.0, -1.4835298641951802, 0.06981317007977318])

	# #move back to base top approach
	# manipulator_move([0.0, 0.9599310885968813, 0.43493604959698695, 0.0, -1.5707963267948966, 0.06981317007977318])

	# #move the manipulator to the cup grasp position 
	# manipulator_move([0.0, 0.9948376736367678, 0.43493604959698695, 0.0, -1.5446163880149817, 0.06981317007977318])

	# #open gripper to release cup
	# pubGripper.publish(40)

	# #move the manipulator to the cup approach position 
	# manipulator_move([-0.3490658503988659, 0.9948376736367678, 0.43493604959698695, 0.0, -1.5446163880149817, 0.06981317007977318])

if __name__=='__main__':
	try:
		#create global variable to identify whether the manipulator is currently moving
		MANIPULATOR_MOVING = False
		
		#create the ROS node for the application	
		rospy.init_node('shakemaker')

		#setup publisher to send manipulator joint commands
		pubManipulator = rospy.Publisher('/robotis/base/joint_pose_msg',JointPose, queue_size=1)

		#setup publisher to send gripper commands
		pubGripper = rospy.Publisher('/gripperControl',Int32, queue_size=1)

		#setup publisher to send mixer commands
		pubMixer = rospy.Publisher('/mixerControl',Int32, queue_size=1)

		#setup a subscriber to recieve notifications about manipulator status, allow 2 seconds for subscriber to register
		rospy.Subscriber("/robotis/status", StatusMsg, manipulator_status_callback)
		
		time.sleep(1) 

		#run the main application
		build_shake()
	except rospy.ROSInterruptException:
		pass
